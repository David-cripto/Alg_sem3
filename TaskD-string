#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>

using std::string;
using std::vector;

const int alphabet = 27;

void stepZero(int len, string& text, vector<int>& count, vector<int>& p, vector<vector<int>>& c, int& clas_num) {

	for (int i = 0; i < len; ++i) {
		if (text[i] == '$') {
			++count[0];
			continue;
		}

		++count[text[i] - 'a' + 1];
	}

	for (int i = 1; i < alphabet; ++i) {
		count[i] += count[i - 1];
	}

	for (int i = 0; i < len; ++i) {
		if (text[i] == '$') {
			p[0] = i;
			continue;
		}

		p[--count[text[i] - 'a' + 1]] = i;
	}

	for (int i = 1; i < len; ++i) {
		if (text[p[i]] != text[p[i - 1]]) {
			++clas_num;
		}

		c[0][p[i]] = clas_num - 1;
	}
	
}

void stepFromKToKPlusOne(int len, int& counter, vector<int>& p, vector<int>& pn, vector<vector<int>>& c, int& clas_num) {
	for (int i = 1; i < len; i *= 2) {

		for (int j = 0; j < len; ++j) {
			pn[j] = p[j] - static_cast<int>(pow(2, counter));
			if (pn[j] < 0) {
				pn[j] += len;
			}
		}

		vector<int> coun(clas_num, 0);

		for (int j = 0; j < len; ++j) {
			++coun[c[counter][pn[j]]];
		}

		for (int j = 1; j < static_cast<int>(coun.size()); ++j) {
			coun[j] += coun[j - 1];
		}

		for (int j = len - 1; j >= 0; --j) {
			p[--coun[c[counter][pn[j]]]] = pn[j];
		}

		vector<int> clas_num_vec(len, 0);
		c.push_back(clas_num_vec);

		clas_num = 1;

		for (int j = 1; j < len; ++j) {
			int mid1 = (p[j] + static_cast<int>(pow(2, counter))) % len;
			int mid2 = (p[j - 1] + static_cast<int>(pow(2, counter))) % len;

			if (c[counter][p[j]] != c[counter][p[j - 1]] || c[counter][mid1] != c[counter][mid2]) {
				++clas_num;
			}
			c[counter + 1][p[j]] = clas_num - 1;
		}

		counter++;
	}
}

void lcp_arr(int len, vector<int>& p, vector<int>& lcp, int& counter, vector<vector<int>>& c) {
	for (int i = 1; i < len - 1; i++) {
		int x = p[i];
		int y = p[i + 1];

		for (int k = counter - 1; k >= 0; --k)
			if (c[k][x] == c[k][y]) {
				lcp[i - 1] += pow(2, k);
				x += pow(2, k);
				y += pow(2, k);
			}
	}
}

int result(string& text) {
	text.push_back('$');
	int len = static_cast<int>(text.length());
	vector<int> p(len);
	vector<vector<int>> c(1, vector<int>(len));
	vector<int> count(alphabet, 0);
	int ans = 0;
	vector<int> pn(len);
	int counter = 0;
	int clas_num = 1;
	std::vector<int> lcp(len - 2, 0);

	stepZero(len, text, count, p, c, clas_num);
	stepFromKToKPlusOne(len, counter, p, pn, c, clas_num);
	lcp_arr(len, p, lcp, counter, c);

	for (int i = 1; i < len; i++) {
		ans += (len - 1) - p[i];
	}
	for (int i = 0; i < len - 2; i++) {
		ans -= lcp[i];
	}

	return ans;
}

int main() {
	string str;
	std::cin >> str;
	std::cout << result(str);
	return 0;
}
