#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

using std::string;

long long z_fun(std::string s) {
	long long n = static_cast<long long>(s.length());//len of s
	std::vector<long long> z1(n);// z-fun
	std::vector<long long> z2(n);// z-fun
	long long ans = 0;
	for (long long i = 1, l = 0, r = 0; i < n; ++i) {
		if (i <= r) {//take the min for don't go outside the border
			z1[i] = std::min(r - i, z1[r - i + l]);
			z2[i] = std::min(r - i + 1, z2[r - i + l + 1]);
		}
		while (i + z1[i] + 1 <= n && i - z1[i] - 1 >= 0 && s[i + z1[i] + 1] == s[i - z1[i] - 1]) {//count z-fun
			++z1[i];
		}
		while (i + z2[i] <= n && i - z2[i] - 1 >= 0 && s[i + z2[i]] == s[i - z2[i] - 1]) {//count z-fun
			++z2[i];
		}
		if (i + z1[i] > r) {//move the right border
			l = i - z1[i];
			r = i + z1[i];
		}
		if (i + z2[i] - 1 > r) {//move the right border
			l = i - z2[i];
			r = i + z2[i] - 1;
		}
	}
	for (long long i = 0; i < n; ++i) {
		ans += z1[i] + z2[i];
	}
	return ans;
}

int main() {
	std::string str;
	std::cin >> str;
	std::cout << z_fun(str);
	return 0;
}
